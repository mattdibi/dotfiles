priority -50

global !p

import random, string

def getClassNameFromFilename():
	filename_splt = snip.fn.split('.')[0].split('_')
	filename_splt = [splitted_strings.capitalize() for splitted_strings in filename_splt]
	class_name = ''.join(filename_splt)
	return class_name

endglobal

snippet func_doc "Function/Method doxygen documentation"
/*! @brief ${1:Brief description}
 *
 *  ${2:Detailed description}
 *
 *  @param  ...
 *  @return ...
 *  @throws ...
 */
endsnippet

snippet class_doc "Class doxygen documentation"
/*! @class `!v expand('%:t:r')`
 *  @brief ${1:Brief description}
 *
 *  ${2:Detailed description}
 */
endsnippet

snippet cfile ".cpp file doxygen documentation"
/*! @file   `!v expand('%:t')`
 *  @author `git config user.name`
 *  @date   `date +%d/%m/%Y`
 *  @brief  `!v expand('%:t:r')`'s class implemetation file.
 *
 *  @details ${4:Detailed description}
 */
endsnippet

snippet hfile ".h file doxygen documentation"
/*! @file   `!v expand('%:t')`
 *  @author `git config user.name`
 *  @date   `date +%d/%m/%Y`
 *  @brief  `!v expand('%:t:r')`'s class header file.
 *
 *  @details ${1:Detailed description}
 */
endsnippet

snippet if "if() (if)"
if (${1:/* condition */}) {
	${VISUAL}$0
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet while "while loop (while)"
while(${1:condition}) {
	${2:/* while body */}
}
endsnippet

snippet print "print debug"
std::cout << "${1:${VISUAL:var}} = " << $1 << "\n";
endsnippet

snippet show "show debug"
cv::namedWindow("${1:${VISUAL:mat}}",cv::WINDOW_NORMAL);
cv::resizeWindow("$1", 640, 480);
cv::imshow("$1", $1);
endsnippet

snippet enum "enum (enum)"
enum class ${1:Identifier} {
	${2:Enumerator},
};
endsnippet

snippet struct "struct (struct)"
struct ${0:Name} {
	${1:/* fields */}
};
endsnippet

snippet switch "switch (switch)"
switch (${1:expression}) {

	case ${2:case}:
		${3:/* case body */}
		break;

	default: 
		break;
}
endsnippet

snippet try "try (try)"
try {
	${VISUAL}$0
} catch(${1:/* exception */}) {

}
endsnippet

snippet opencv_inc "#include opencv"
#include <opencv2/opencv.hpp>
endsnippet

snippet class "class (class)"
/*! @class ${0:`!v expand('%:t:r')`}
 *  @brief ${1:Brief description}
 *
 *  ${2:Detailed description}
 */
class $0 {

  public:
	$0() = default;

  private:
	${3:/* data */}
};
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[]) {
	${VISUAL}$0

	return 0;
}
endsnippet

snippet gtest "gtest (test)"
TEST(${1:TestSuite}, ${2:FunctionWorks}) {
	${3:/* test body */}
}
endsnippet

snippet gtest_suite "gtest (suite)"
class ${1:TestSuite} : public ::testing::Test {
  protected:
	/* data */
};

TEST_F($1, ${3:FunctionWorks}) {
	/* test body */
}
endsnippet

snippet gtest_suite_full "gtest (suite full)"
class ${1:TestSuite} : public ::testing::Test {
  protected:
    void SetUp() override {
		/* setup body */
	}

    void TearDown() override {
		/* teardown body */
	}
	/* data */
};

TEST_F($1, ${3:FunctionWorks}) {
	/* test body */
}
endsnippet

snippet gtest_value_param "gtest (value param)"
class ${1:TestSuite} : public ::testing::TestWithParam<${2:Type}> {
  protected:
	// You can implement all the usual fixture class members here.
	// To access the test parameter, call GetParam() from class
	// TestWithParam<T>.
	/* data */
};

TEST_P($1, ${3:FunctionWorks}) {
	/* test body */
}

INSTANTIATE_TEST_SUITE_P(
	${4:InstantiationName},
	$1,
	::testing::${5:Range(begin, end)/Values(v1, ... vN)/ValuesIn(container)/Bool()/Combine()});
endsnippet

snippet gtest_main "gtest() (main)"
#include <gtest/gtest.h>

int main(int argc, char *argv[]) {
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}
endsnippet

snippet gmock_main "gmock() (main)"
#include <gtest/gtest.h>
#include <gmock/gmock.h>

int main(int argc, char *argv[]) {
	::testing::InitGoogleMock(&argc, argv);
	return RUN_ALL_TESTS();
}
endsnippet

# vim:ft=snippets:
